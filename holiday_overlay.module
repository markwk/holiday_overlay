<?php

/**
 * @file
 *
 * Holiday Overlay module for Drupal.
 */

/**
 * Implements hook_permission().
 */
function holiday_overlay_permission() {
  return array(
    'administer holiday overlay' => array(
      'title' => t('Administer Holiday Overlay'),
      'description' => t('Change Holiday Overlay settings.'),
    ),
    'override holiday overlay' => array(
      'title' => t('Override Holiday Overlay'),
      'description' => t("Don't show the holiday overlay to users with this permission."),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function holiday_overlay_menu() {
  $items['admin/config/system/holiday_overlay'] = array(
    'title' => 'Holiday Overlay',
    'access arguments' => array('administer holiday overlay'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('holiday_overlay_settings_page'),
  );

  return $items;
}

/**
 * Implements hook_page_alter().
 */
function holiday_overlay_page_alter(&$page) {
	if (!variable_get('holiday_overlay_context', 0)) {
      holiday_overlay_add_js();
    }
    else {
      if ($plugin = context_get_plugin('reaction', 'holiday_overlay_add')) {
        if ($plugin->execute()) {
          holiday_overlay_add_js();
        }
      }
    }
}
    
/**
 * Function to determine whether the holiday overlay should be enabled.
 */
function holiday_overlay_is_active() {
  global $user;

  // Return FALSE if the user has override permission.
  if (user_access('override holiday overlay')) {
    return FALSE;
  }

  $current_date = date('n j Y');
  $date = variable_get('holiday_overlay_date', _holiday_overlay_defaults('date'));
  if ($current_date == $date['month'] . ' ' . $date['day'] . ' ' . $date['year']) {
    dpm('MATCH');
    return TRUE;
  }

  return FALSE;
}

/**
 * Page callback for holiday overlay settings.
 */
function holiday_overlay_settings_page() {
  $form['description'] = array(
    '#markup' => '<p>' . t('Change Holiday Overlay settings on this page.') . '</p>',
  );

  // Set default date of Christmas (current year) and define date field.
  $date = variable_get('holiday_overlay_date', _holiday_overlay_defaults('date'));
  $form['holiday_overlay_date'] = array(
    '#type' => 'date',
    '#title' => t('Holiday Overlay Date'),
    '#description' => t('The date during which the Holiday Overlay message will be shown to everyone without override permission.'),
    '#default_value' => $date,
    '#required' => TRUE,
  );

  // Set default message and define message field.
  $message = variable_get('holiday_overlay_message', array('value' => _holiday_overlay_defaults('message'), 'format' => 1));
  $form['holiday_overlay_message'] = array(
    '#type' => 'text_format',
    '#title' => t('Message to Display'),
    '#description' => t('The message that will be shown inside the Holiday Overlay on the date specified above.'),
    '#default_value' => $message['value'],
    '#format' => $message['format'],
  );
  if (module_exists('context')) {
    $form['holiday_overlay_context'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use Context to choose when Holiday Overlay is added to the page.'),
      '#description' => t('The Holiday Overlay will be included on all pages of your site by default. You can use <a href="!context_url">Context module</a> to fine tune when and where it will be displayed.', array('!context_url' => url('admin/structure/context'))),
      '#default_value' => variable_get('holiday_overlay_context', 0),
    );
  }
  return system_settings_form($form);
}

/**
 * Returns defaults for Holiday Overlay.
 *
 * @param $option
 *   - 'message' - returns the default message (string).
 *   - 'date' - returns the default date (array).
 */
function _holiday_overlay_defaults($option) {
  if ($option == 'message') {
    return t("This website celebrates Christmas. Please enjoy the holiday with your family instead of spending time browsing the web.");
  }
  elseif ($option == 'date') {
    return array(
      'year' => date('Y'),
      'month' => 12,
      'day' => 25,
    );
  }
}

/**
 * Builds and inserts the correct Holiday Overlay Javascript into the page.
 */
function holiday_overlay_add_js() {
    // Add message to JS settings for overlay.
    if (holiday_overlay_is_active()) {
    $message = variable_get('holiday_overlay_message', array('value' => _holiday_overlay_defaults('message'), 'format' => 1));
    $message = check_markup($message['value'], $message['format']);
    drupal_add_js(array('holidayOverlayMessage' => $message), 'setting');

    // Add overlay JS and CSS.
    drupal_add_js(drupal_get_path('module', 'holiday_overlay') . '/js/holiday_overlay.overlay.js', 'file');
    drupal_add_css(drupal_get_path('module', 'holiday_overlay') . '/css/holiday_overlay.styles.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
   }
}

/**
 * Implements hook_context_registry().
 */
function holiday_overlay_context_registry() {
  return array(
    'reactions' => array(
      'holiday_overlay_add' => array(
        'title' => t('Holiday Overlay'),
        'plugin' => 'holiday_overlay_context_reaction_add',
        'description' => t('Add Holiday Overlay to the page'),
      ),
    ),
  );
}

/**
 * CTools plugin API hook for Context.
 */
function holiday_overlay_context_plugins() {
  $plugins = array();
  $plugins['holiday_overlay_context_reaction_add'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'holiday_overlay') . '/plugins',
      'file' => 'holiday_overlay_context_reaction_add.inc',
      'class' => 'holiday_overlay_context_reaction_add',
      'parent' => 'context_reaction',
    ),
  );

  return $plugins;
}
